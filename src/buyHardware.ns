/** @param {NS} ns **/
export async function main(ns) {
    const options = JSON.parse(ns.read("options.txt"))
    const sleepTime = 100_000 // 100s
    
    let lastBoughtRam = getLargestPurchasedServerRam(ns)
    let name = 1
    while (true) {
        await ns.sleep(sleepTime)
        const serverLimit = ns.getPurchasedServerLimit()
        const servers = ns.getPurchasedServers()
        ns.print("Number of servers: " + servers.length)
        ns.print("LastBoughtRam: " + lastBoughtRam)
        const money = ns.getServerMoneyAvailable("home") - options.keepMoney
        const ram = getMaxPayableServer(ns, money)
        if (ram >= lastBoughtRam) {
            if (servers.length == serverLimit) {
                ns.print("Deleting smallest server")
                let smallest = servers[0]
                let smallestSize = ns.getServerMaxRam(smallest)
                for (const s of servers) {
                    const sram = ns.getServerMaxRam(s)
                    if (sram < smallestSize) {
                        smallestSize = sram
                        smallest = s
                    }
                }
                if (smallest < ram) {
                    ns.deleteServer(smallest)
                } else {
                    continue
                }             
            }
            
            ns.print("Buying: " + ram + " for " + ns.getPurchasedServerCost(ram))
            ns.purchaseServer(String(name++), ram)
            if (ram > lastBoughtRam) {
                lastBoughtRam = ram
            }
        }
    }
}

function getMaxPayableServer(ns, money) {
    let serverRam = ns.getPurchasedServerMaxRam()
    ns.print("max ram:" + serverRam)
    while (ns.getPurchasedServerCost(serverRam) > money) {
        serverRam /= 2
        if (serverRam <= 4) { // don't by very small servers
            return 0
        }
    }
    ns.print("buyable ram:" + serverRam)
    return serverRam
}

function getLargestPurchasedServerRam(ns) {
    let maxRam = 0
    for (const s of ns.getPurchasedServers()) {
        const ram = ns.getServerMaxRam(s)
        if (ram > maxRam) {
            maxRam = ram
        }
    }
    return maxRam
}